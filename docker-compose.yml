version: '3.9'

services:
  postgres:
    image: postgres:15
    container_name: local_postgres
    restart: always
    profiles: ["dev"]   # âœ… Only included when --profile dev is active
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    image: redis:alpine
    container_name: local_redis
    restart: always
    ports:
      - "6379:6379"

  loki:
    image: grafana/loki:latest
    container_name: local_loki
    restart: always
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./loki-config/loki-config.yaml:/etc/loki/loki-config.yaml
      - /var/lib/loki:/var/lib/loki

  grafana:
    image: grafana/grafana:latest
    container_name: local_grafana
    restart: always
    ports:
      - "3200:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
    volumes:
      - grafana-data:/var/lib/grafana_test_portal

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    restart: always
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    restart: always
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - kafka-data:/var/lib/kafka/data

  test_microservice:
    build: .
    container_name: local_test_microservice
    restart: always
    depends_on:
      - redis
      - loki
      - grafana
      - kafka
    ports:
      - "${PORT}:${PORT}"
    environment:
      DATABASE_URL: ${DATABASE_URL}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_URL: ${REDIS_URL}
      TOKEN_SECRET: ${TOKEN_SECRET}
      PORT: ${PORT}
      KAFKA_BROKER: ${KAFKA_BROKER}
    volumes:
      - .:/app_test
      - /app_test/node_modules

volumes:
  postgres_data:
  grafana-data:
  kafka-data:
  zookeeper-data: